/* A complete guide to Flexbox */

.violet {
    background-color: rgb(146, 105, 146);
    border: 3px solid purple;
}

.red {
    background-color: rgb(243, 156, 156);
    border: 3px solid red;
}

.blue {
    background-color: rgb(144, 144, 241);
    border: 3px solid blue;
}

.green {
    background-color: rgb(151, 238, 151);
    border: 3px solid green;
}

.orange {
    background-color: rgb(252, 209, 129);
    border: 3px solid orange;
}


/* Perfect Centering */

.parent {
    display: flex;
    height: 300px;
    /* Or whatever */
}

.child {
    width: 100px;
    /* Or whatever */
    height: 100px;
    /* Or whatever */
    margin: auto;
    /* Magic! */
}


/* This relies on the fact a margin set to auto in a flex container absorb extra space. So setting a margin of auto will make the item perfectly centered in both axes. */


/* List of 6 items */

.flex-container {
    /* We first create a flex layout context */
    display: flex;
    /* Then we define the flow direction 
     and if we allow the items to wrap 
   * Remember this is the same as:
   * flex-direction: row;
   * flex-wrap: wrap;
   */
    flex-flow: row wrap;
    /* Then we define how is distributed the remaining space */
    justify-content: space-around;
    padding: 0;
    margin: 0;
    list-style: none;
}

.flex-item {
    background: tomato;
    padding: 5px;
    width: 200px;
    height: 150px;
    margin-top: 10px;
    line-height: 150px;
    color: white;
    font-weight: bold;
    font-size: 3em;
    text-align: center;
}


/* Navigation */


/* Large screens */

.navigation {
    display: flex;
    flex-flow: row wrap;
    /* this aligns items to the end line on main-axis */
    justify-content: flex-end;
    /* want a right-aligned navigation element on the very top of our website */
    list-style: none;
    margin: 0;
    background: deepskyblue;
}

.navigation a {
    text-decoration: none;
    display: block;
    padding: 1em;
    color: white;
}

.navigation a:hover {
    background: #1565C0;
}


/* Medium screens */

@media all and (max-width: 800px) {
    .navigation {
        /* When on medium sized screens, we center it by evenly distributing empty space around items */
        justify-content: space-around;
    }
}


/* Small screens */

@media all and (max-width: 600px) {
    .navigation {
        /* On small screens, we are no longer using row direction but column, single column specifically */
        flex-flow: column wrap;
        padding: 0;
    }
    .navigation a {
        text-align: center;
        padding: 10px;
        border-top: 1px solid rgba(255, 255, 255, 0.3);
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }
    .navigation li:last-of-type a {
        border-bottom: none;
    }
}


/* Flex items flexibility */

.wrapper {
    display: flex;
    flex-flow: row wrap;
    font-weight: bold;
    text-align: center;
}


/* We tell all items to be 100% width, via flex-basis */

.wrapper>* {
    padding: 10px;
    flex: 1 100%;
}


/* We rely on source order for mobile-first approach
 * in this case:
 * 1. header
 * 2. article
 * 3. aside 1
 * 4. aside 2
 * 5. footer
 */

.header {
    background: tomato;
}

.footer {
    background: lightgreen;
}

.main {
    text-align: left;
    background: deepskyblue;
}

.aside-1 {
    background: gold;
}

.aside-2 {
    background: hotpink;
}


/* Medium screens */

@media all and (min-width: 600px) {
    .aside {
        /* We tell both sidebars to share a row */
        flex: 1 0 0;
    }
}


/* Large screens */

@media all and (min-width: 800px) {
    /* We invert order of first sidebar and main and tell the main element to take twice as much width as the other two sidebars 
   */
    .main {
        flex: 3 0px;
    }
    .aside-1 {
        order: 1;
    }
    .main {
        order: 2;
    }
    .aside-2 {
        order: 3;
    }
    .footer {
        order: 4;
    }
}

body {
    padding: 2em;
}